@startuml

' /presentation

class Entity<X, Y> {
    - id: X
    - value: Y
}

class EntitySet<X extends Entity<Y, Z>> {
    - entities: X[]
    + boolean contains(id: Id);
    + boolean add(x: X);
    + boolean remove(id: Id);
    + X? find(id: Id);
    + X[] values();
}

interface Chat {
    - messages: Message[]
    + addMessage(message: Message)
    + Message[] getMessages()
}

class User {
    - id: UserId
    - value: Pair<string, string>
}

interface RoomAggregate {
    - id: RoomId
    - value: Pair<UserEntitySet, Chat>
    + boolean isUserJoined(user: User)
    + boolean joinUser(user: User)
    + boolean leaveUser(user: User)
    + void sendMessage(sender: User, message: Message)
}


interface Message<X extends MessageContent> {

    + X getContent();
    + User getSender();    

}

class UserEntitySet {
    entities: User[]
}

class RoomEntitySet {
    entities: RoomAggregate[]
}

Entity <|-- User
Entity "n" *-- "1" EntitySet
EntitySet <|-- UserEntitySet: bind<<X::User>>
EntitySet <|-- RoomEntitySet: bind<<X::RoomAggregate>>

User "n" *-- "1" UserEntitySet
RoomAggregate"n" *-- "1" RoomEntitySet

Entity <|-- RoomAggregate
UserEntitySet "1" *-- "1" RoomAggregate
Chat "1" *-- "1" RoomAggregate

Message "n" *-- "1" Chat

@enduml