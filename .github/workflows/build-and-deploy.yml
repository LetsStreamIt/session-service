name: CI/CD Process
on:
  workflow_call:
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows, macos]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout
        uses: DanySK/action-checkout@0.2.22
      - uses: actions/setup-node@v4.1.0
        with:
          cache: npm
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Run tests
        run: npm test
  
  format:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: DanySK/action-checkout@0.2.22
      - uses: actions/setup-node@v4.1.0
        with:
          cache: npm
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      # Run formatter
      - name: Check code format
        run: npm run format:check
  
  linter:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: DanySK/action-checkout@0.2.22
      - uses: actions/setup-node@v4.1.0
        with:
          cache: npm
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      # Run linter
      - name: Run ESLint
        run: npm run lint:check

  release:
    permissions:
      contents: write
      packages: write
    concurrency:
      group: release
    runs-on: ubuntu-latest
    needs:
      - build
      - format
      - linter
    outputs:
      release_created: ${{ steps.check-release.outputs.release_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - uses: actions/setup-node@v4.1.0
        with:
          cache: npm
          node-version: lts/*
      - run: npm clean-install
      - name: Run semantic-release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release > semantic_release_output.txt || false
          cat semantic_release_output.txt
      - name: Check if release was created
        id: check-release
        run: 'echo "release_created=$(grep -q "no new version is released" semantic_release_output.txt && echo false || echo true)" >> $GITHUB_OUTPUT'
        shell: bash

  docs:
    concurrency:
      # Only one release job at a time. Strictly sequential.
      group: docs
    runs-on: ubuntu-latest
    needs:
      - release
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && needs.release.outputs.release_created == 'true'
    # Skips if is PR or isn't inside main branch
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: build docs
        uses: actions/setup-node@v4.1.0
        with:
          cache: npm
          node-version: lts/*
      - name: Install dependencies
        run: npm clean-install
        # build doc using Typedoc
      - name: Build Typedoc site
        run: npm run docs:build
      - name: Build Async API doc
        run: npm run docs:build-api

      # deploy to GH pages
      - name: Deploy to GitHub Pages
        uses: crazy-max/ghaction-github-pages@v4
        with:
          target_branch: gh-pages
          build_dir: docs/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-image:
    permissions:
      contents: write
      packages: write
    concurrency:
      group: deploy-image
    runs-on: ubuntu-latest
    needs:
      - release
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && needs.release.outputs.release_created == 'true'
    # Skips if is PR or isn't inside main branch
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@06895751d15a223ec091bea144ad5c7f50d228d0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@0de3687b53cd804b63dd87819f7bda043569ce4a
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@5e99dacf67635c4f273e532b9266ddb609b3025a
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  success:
    runs-on: ubuntu-latest
    needs:
      - build
      - format
      - linter
      - release
      - deploy-image
      - docs
    if: >-
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}
